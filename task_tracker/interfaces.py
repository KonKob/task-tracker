# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_interfaces.ipynb.

# %% auto 0
__all__ = ['Main_Interface', 'Proband_Interface', 'Sub_Interface']

# %% ../nbs/02_interfaces.ipynb 3
import time
import datetime
from abc import ABC, abstractmethod, abstractproperty
from typing import List
from pathlib import Path

import ipywidgets as widgets

from .trial_components import Trial, Task
from .utils import create_timeline

# %% ../nbs/02_interfaces.ipynb 4
class Main_Interface():
     
    def __init__(self, trial):
        self.all_paused = False
        self.trial = trial
        self.interfaces = self._create_sub_interfaces(self.trial.task_dict)
        self.pause_button = self._create_pause_button()
        self.proband_interface = self._create_proband_interface(trial.demographic_dict)
        export_proband_button = self._create_proband_export_button()
        start_trial_button = self._create_start_trial_button()
        self.description_task_dropdown, add_description_button, self.description_field = self._create_description_widgets()
        self.current_status, self.graphical_output, update_status = self._create_trial_overview()
        self.main_interface = self._create_main_interface(self.pause_button, export_proband_button, start_trial_button, self.description_task_dropdown, add_description_button, self.description_field, self.current_status, self.graphical_output, update_status)
        self.gui = self._merge_interfaces_into_gui(self.interfaces, self.main_interface, self.proband_interface)
        self.all_children = self.gui.children
        self.all_titles = self.gui.titles
        self.not_running_children = (self.gui.children[0], self.gui.children[-1])
        self.not_running_titles = ["Main", "Proband"]
        self.gui.children = self.not_running_children
        self.gui.titles = self.not_running_titles
        self.trial_running = False
        
    def _on_add_description_button_clicked(self, b):
        if self.description_task_dropdown.value is not None:
            task_name, task_number = self.description_task_dropdown.value.split("_")
            for task in self.trial.history.current_tasks.values():
                if task is not None:
                    if task.task_number == int(task_number):
                        task.add_description(self.description_field.value)
            for lane in self.trial.history.tasks:
                for task in self.trial.history.tasks[lane]:
                    if task is not None:
                        if task.task_number == int(task_number):
                            task.add_description(self.description_field.value)
        else:
            print("You didn't select a task!")
    
    def _on_update_status_button_clicked(self, b):
        d = self.trial.history.export_tasks(self.trial.start_time)
        fig = create_timeline(d=d, task_names = d["task_name"].unique(), colors = self.trial.colors)
        filename = self.trial.out_dir.joinpath(f"{time.strftime('%Y-%m-%d_%H.%M.%S', time.gmtime())}_timeline.png")
        fig.savefig(filename)
        file = open(filename, "rb")
        self.graphical_output.value = file.read()
        self.description_task_dropdown.options=(f"{task.task_name}_{task.task_number}" for task in list(self.trial.history.current_tasks.values()) + [task for lane in self.trial.history.tasks.values() for task in lane] if task is not None)
        active_tasks = [(lane, self.trial.history.current_tasks[lane].task_name) for lane in self.trial.history.current_tasks if self.trial.history.current_tasks[lane] is not None]
        self.current_status.value = f"Active tasks: {active_tasks}" if active_tasks else "No tasks running"
        
    def _create_trial_overview(self):
        current_status = widgets.Label("No tasks running")
        graphical_output = widgets.Image()
        layout = widgets.Layout(width="100%", height="100px")
        update_button = widgets.Button(description="Update trial overview", icon = "refresh", layout=layout, style={"font_size": "15px"})
        update_button.on_click(self._on_update_status_button_clicked)
        return current_status, graphical_output, update_button  
        
    def _create_description_widgets(self):
        description_task_dropdown = widgets.Dropdown(description="Select task", style = {'description_width': 'initial'})
        layout = widgets.Layout(width="100%", height="100px")
        add_description_button = widgets.Button(description="Add description to selected task!", layout = layout, icon = "plus", style={"font_size": "15px"})
        add_description_button.on_click(self._on_add_description_button_clicked)
        description_field = widgets.Textarea(description="Enter description here!", style = {'description_width': 'initial'})
        description_field.layout.width = "100%"
        description_field.layout.height = "275px"
        return description_task_dropdown, add_description_button, description_field
        
    def _create_start_trial_button(self):
        layout = widgets.Layout(width="100%", height="100px")
        if not self.trial.started:
            start_button = widgets.Button(description="Start trial", layout=layout, style={"font_size": "25px"})
            start_button.style.button_color = "green"
        else:
            start_button = widgets.Button(description="Trial ended", layout=layout, style={"font_size": "25px"}, disabled=True)
            start_button.style.button_color = "firebrick"
            self.pause_button.disabled = True
        start_button.on_click(self._on_start_button_clicked)
        return start_button
    
    def _on_start_button_clicked(self, b):
        if not self.trial.started:
            self.gui.children = self.all_children
            self.gui.titles = self.all_titles
            self.trial.set_start_time()
            if not self.trial.audio_record.running:
                self.trial.audio_record.start()
            b.style.button_color = "firebrick"
            b.description = "End trial"
            self.pause_button.disabled = False
        else:
            if self.trial.audio_record.running:
                self.trial.audio_record.end()
            self.gui.children = self.not_running_children
            self.gui.titles = self.not_running_titles
            b.disabled = True
            b.description = "Trial ended"
            self.pause_button.disabled = True
            self.pause_button.disabled = True
            self.trial.end_trial()
            for lane in self.trial.history.current_tasks:
                    if self.trial.history.current_tasks[lane] is not None:
                        if self.trial.history.current_tasks[lane].running:
                            self.trial.history.current_tasks[lane].end()
                            self.trial.history.add_current_task_to_history(lane)
                            for pause in self.trial.history.current_tasks[lane].pauses:
                                self.trial.history.add_pause(pause)
                        self.trial.history.current_tasks[lane] = None
        
    def _create_proband_interface(self, demographics):
        return Proband_Interface(demographics)
    
    def _create_sub_interfaces(self, tasks):
        if type(tasks) == list:
            interfaces = {"Tasks": Sub_Interface(tasks, self.trial)}
        else:
            interfaces = {task: Sub_Interface(tasks[task], self.trial, lane=task) for task in tasks}
        return interfaces
    
    def _create_main_interface(self, pause_button, export_proband_button, start_trial_button, description_task_dropdown, add_description_button, description_field, current_status, graphical_output, update_status):
        status = widgets.VBox([current_status, graphical_output, update_status], layout=widgets.Layout(width="50%", height="100%", border='solid thin', margin="5px", align_items = "center"))
        buttons = widgets.VBox([pause_button, export_proband_button, start_trial_button], layout=widgets.Layout(width="25%", height="100%", border='solid thin', margin="5px", align_items = "center"))
        descriptions = widgets.VBox([description_task_dropdown, description_field, add_description_button], layout=widgets.Layout(width="25%", height="100%", border='solid thin', margin="5px", align_items = "center"))
        return widgets.HBox([buttons, descriptions, status])
    
    def _merge_interfaces_into_gui(self, interfaces, main_interface, proband_interface):
        children = [main_interface] + [interface.interface for interface in interfaces.values()] + [proband_interface.interface]
        tab = widgets.Tab()
        tab.children = children
        tab.titles = ["Main"] + list(interfaces.keys()) + ["Proband"]
        return tab
    
    def _create_pause_button(self):
        layout = widgets.Layout(width="100%", height="100px")
        pause_button = widgets.Button(description="Start pause for all", layout=layout, style={"font_size": "25px"}, disabled=True)
        pause_button.style.button_color = "gold"
        pause_button.on_click(self._on_pause_button_clicked)
        return pause_button
    
    def _create_proband_export_button(self):
        layout = widgets.Layout(width="100%", height="100px")
        proband_button = widgets.Button(description="Export proband information", layout=layout, style={"font_size": "20px"})
        proband_button.style.button_color = "darkgray"
        proband_button.on_click(self._on_proband_button_clicked)
        return proband_button
    
    def _on_proband_button_clicked(self, b):
        self.proband_interface.export_values_to_proband(self.trial.proband)
        b.description = "Update proband information"
    
    def _on_pause_button_clicked(self, b):
        if not self.all_paused:
            b.description = "End pause for all"
            b.icon = "circle"
            b.style.button_color = "firebrick"
            for task in self.trial.history.current_tasks.values():
                if task is not None:
                    if task.running:
                        if not task.currently_paused:
                            task.pause_start()
            self.all_paused = True
            self.gui.children = self.not_running_children
            self.gui.titles = self.not_running_titles
        else:
            for task in self.trial.history.current_tasks.values():
                if task is not None:
                    if task.running:
                        if task.currently_paused: # derzeit wird die pause gestoppt auch wenn schon vor der globalen pause pausiert war
                            task.pause_end()
            b.description = "Start pause for all"
            b.style.button_color = "gold"
            b.icon = ""
            self.all_paused = False
            self.gui.children = self.all_children
            self.gui.titles = self.all_titles

# %% ../nbs/02_interfaces.ipynb 5
class Proband_Interface():
    
    def __init__(self, demographics, n_in_one_row = 4):
        self.widget_dict = self._create_demographics(demographics)
        self.interface = self._arrange_widgets(self.widget_dict, n_in_one_row)
    
    def _create_demographics(self, demographics):
        style = {'description_width': 'initial'}
        return {name: getattr(widgets, typ)(description=name, style=style, options=options) for name, typ, options in zip(demographics["descriptions"], demographics["widget_types"], demographics["values"])}
    
    def _arrange_widgets(self, widget_list, n_in_one_row):
        hbox_elements = []
        for i in range(1, len(widget_list)//n_in_one_row+2):
            hbox_elements.append(widgets.HBox(list(widget_list.values())[(n_in_one_row*(i-1)):(n_in_one_row*i)]))
        return widgets.VBox(hbox_elements)
    
    def export_values_to_proband(self, proband):
        for widget in self.widget_dict:
            proband.set_metadata(self.widget_dict[widget].value, widget)

# %% ../nbs/02_interfaces.ipynb 6
class Sub_Interface():
    
    def __init__(self, tasks: List, trial: Trial, lane = "Tasks"):
        self.trial = trial
        self.n_in_one_row = 5
        self.buttons = self._create_task_buttons(tasks)
        self.pause_button = self._create_pause_button()
        self.lane = lane
        self.new_text = self._create_new_task_text()
        self.interface = self._create_interface(self.buttons, self.new_text, self.pause_button)
        self.trial.history.current_tasks[self.lane] = None
        
    def _create_interface(self, buttons, text, pause):
        tasks_vbox = self._arrange_widgets(list(self.buttons.values()), self.n_in_one_row)
        return widgets.VBox([tasks_vbox, text, pause])
        
    def _arrange_widgets(self, widget_list, n_in_one_row):
        hbox_elements = []
        for i in range(1, len(widget_list)//n_in_one_row+2):
            hbox_elements.append(widgets.HBox(widget_list[(n_in_one_row*(i-1)):(n_in_one_row*i)]))
        return widgets.VBox(hbox_elements)
        
    def _create_task_buttons(self, tasks):
        layout = widgets.Layout(width=f"{100/self.n_in_one_row}%", height="100px")
        task_buttons = {task: widgets.Button(description = task, layout=layout, style={"font_size": "15px"}) for task in tasks}
        for button in task_buttons.values():
            button.on_click(self._on_task_button_clicked)
        task_buttons["Sonstige"] = widgets.Button(description = "Sonstige", layout=layout, style={"font_size": "15px"})
        task_buttons["Sonstige"].on_click(self._on_new_task_button_clicked)
        task_buttons["Sonstige"].style.button_color = "darkgray"
        task_buttons["Keine neue Aufgabe"] = widgets.Button(description = "Keine neue Aufgabe", layout=layout, icon = "circle", style={"font_size": "15px"})
        task_buttons["Keine neue Aufgabe"].style.button_color = "firebrick"
        task_buttons["Keine neue Aufgabe"].on_click(self._on_end_task_no_new_task_button_clicked)
        return task_buttons
    
    def _create_pause_button(self):
        layout = widgets.Layout(width="100%", height="100px")
        pause_button = widgets.Button(description = "Start pause", disabled = False, layout=layout, style={"font_size": "25px"})
        pause_button.on_click(self._on_pause_button_clicked)
        pause_button.style.button_color = "gold"
        return pause_button
    
    def _on_new_task_button_clicked(self, b):
        self.buttons["Sonstige"].description = self.new_text.value
        self._on_task_button_clicked(b)
        
    def _create_new_task_text(self):
        layout = widgets.Layout(width="100%", height="100px")
        t = widgets.Text("Sonstige", layout=layout)
        t.style.background = "darkgrey"
        return t
    
    def _on_end_task_no_new_task_button_clicked(self, b):
        for button in self.buttons.values():
            button.icon = ""
        self.pause_button.icon = ""
        if self.trial.history.current_tasks[self.lane] is not None:
            if self.trial.history.current_tasks[self.lane].running:
                self.trial.history.current_tasks[self.lane].end()
                self.pause_button.description = "Start pause"
                self.trial.history.add_current_task_to_history(self.lane)
                for pause in self.trial.history.current_tasks[self.lane].pauses:
                    self.trial.history.add_pause(pause)
        self.trial.history.current_tasks[self.lane] = None
        b.icon = "circle"
        
    def _on_pause_button_clicked(self, b):
        if self.trial.history.current_tasks[self.lane] is not None:
            if self.trial.history.current_tasks[self.lane].currently_paused:
                self.trial.history.current_tasks[self.lane].pause_end()
                self.pause_button.description = "Start pause"
                self.pause_button.icon = ""
            else:
                self.trial.history.current_tasks[self.lane].pause_start()
                self.pause_button.description = "End pause"
                self.pause_button.icon = "circle"
                
        
    def _on_task_button_clicked(self, b):
        for button in self.buttons.values():
            button.icon = ""
        self.pause_button.icon = ""
        if self.trial.start_time is None:
            self.trial.set_start_time()
        if self.trial.history.current_tasks[self.lane] is not None:
            if self.trial.history.current_tasks[self.lane].running:
                self.trial.history.current_tasks[self.lane].end()
                self.pause_button.description = "Start pause"
                self.trial.history.add_current_task_to_history(self.lane)
                for pause in self.trial.history.current_tasks[self.lane].pauses:
                    self.trial.history.add_pause(pause)
        b.icon = "circle"
        self.trial.history.current_tasks[self.lane] = Task(task_number=self.trial.task_number, task_name = b.description, lane = self.lane)
        self.trial.history.current_tasks[self.lane].start()
        self.trial.task_number +=1
